global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

	# Default SSL material locations
	ca-base /etc/ssl/certs
	crt-base /etc/ssl/private

	# See: https://ssl-config.mozilla.org/#server=haproxy&server-version=2.0.3&config=intermediate
	ssl-default-bind-ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384
	ssl-default-bind-ciphersuites TLS_AES_128_GCM_SHA256:TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
	ssl-default-bind-options ssl-min-ver TLSv1.2 no-tls-tickets

defaults
	log	global
	mode	http
	option	httplog
	option	dontlognull
	timeout connect 60000
	timeout client  300000
	timeout server  300000
	errorfile 400 /usr/local/etc/haproxy/errors/400.http
	errorfile 403 /usr/local/etc/haproxy/errors/403.http
	errorfile 408 /usr/local/etc/haproxy/errors/408.http
	errorfile 500 /usr/local/etc/haproxy/errors/500.http
	errorfile 502 /usr/local/etc/haproxy/errors/502.http
	errorfile 503 /usr/local/etc/haproxy/errors/503.http
	errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Setup stats admin panel on port 8080 so we can view load statistics for hosted challenges during the CTF
listen stats
	bind haproxy.int.ctf.issessions.ca:8080
	mode http
	stats enable
	stats uri /
	stats auth "$STATS_PANEL_USERNAME":"$STATS_PANEL_PASSWORD"

# Setup a haproxy table to store connection information for each user IP adress
# We'll use in each challenge to limit no of connections and the connection rate
# for users
backend Abuse
	stick-table type ip size 1m expire 10m store conn_rate(3s),conn_cur

# Set the detault mode as TCP, set connection timeouts, and set default backend to kubernetes
# hosted challenges cluster. 
defaults
	mode tcp
	default_backend hosted-challenges-cluster
	timeout connect 60000
	timeout client  300000
	timeout server  300000
	errorfile 400 /usr/local/etc/haproxy/errors/400.http
	errorfile 403 /usr/local/etc/haproxy/errors/403.http
	errorfile 408 /usr/local/etc/haproxy/errors/408.http
	errorfile 500 /usr/local/etc/haproxy/errors/500.http
	errorfile 502 /usr/local/etc/haproxy/errors/502.http
	errorfile 503 /usr/local/etc/haproxy/errors/503.http
	errorfile 504 /usr/local/etc/haproxy/errors/504.http


# The below configurations have configurations for each and every challenge
# For each case, we setup rate limiting rules to a maximum connection rate of 50 every
# 3 seconds, and a maximum of 50 simultaneous connections

# Note that its possible to just create one frontend section and bind to multiple ports,
# however we do not do that to allow for the monitoring of each challenge individually.

# CRYPTOGRAPHY
frontend allyourbases-cryptography
	tcp-request connection reject if { src_conn_rate(Abuse) ge 50 }
	tcp-request connection reject if { src_conn_cur(Abuse) ge 50 }
	tcp-request connection track-sc1 src table Abuse
	bind *:30000

# SYSADMIN
frontend readmeafortune-sysadmin 
	tcp-request connection reject if { src_conn_rate(Abuse) ge 50 }
	tcp-request connection reject if { src_conn_cur(Abuse) ge 50 }
	tcp-request connection track-sc1 src table Abuse
	bind *:30907   

# Lastly, create the hosted-challenges-cluster backend
# We setup HaProxy to use round robin load balancing
backend hosted-challenges-cluster
	mode tcp
	balance roundrobin
	server node1 challenges-cluster-node-0.int.ctf.issessions.ca
	server node2 challenges-cluster-node-1.int.ctf.issessions.ca 
	server node3 challenges-cluster-node-2.int.ctf.issessions.ca
